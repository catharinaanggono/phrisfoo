FLUSH PRIVILEGES;
DROP USER IF EXISTS 'PhrisFooTCM'@'%';

SET GLOBAL event_scheduler = ON;

DROP DATABASE IF EXISTS TCM_PRACTITIONER;
DROP DATABASE IF EXISTS TCM_BOOKING;
DROP DATABASE IF EXISTS TCM_ERROR_LOG;
DROP DATABASE IF EXISTS TCM_ACTIVITY_LOG;
DROP DATABASE IF EXISTS TCM_TREATMENT;
DROP DATABASE IF EXISTS TCM_PATIENT;


DROP DATABASE IF EXISTS TCM_ACTIVITY_LOG;
CREATE DATABASE TCM_ACTIVITY_LOG;
USE TCM_ACTIVITY_LOG;
CREATE TABLE ACTIVITY_LOG(
    ACTIVITY_LOG_ID INT NOT NULL AUTO_INCREMENT,
    ACTIVITY_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ACTIVITY_DESCRIPTION VARCHAR(1000) NOT NULL,
    PRIMARY KEY (ACTIVITY_LOG_ID)
);

DROP DATABASE IF EXISTS TCM_ERROR_LOG;
CREATE DATABASE TCM_ERROR_LOG;
USE TCM_ERROR_LOG;
CREATE TABLE ERROR_LOG(
    ERROR_LOG_ID INT NOT NULL AUTO_INCREMENT,
    ERROR_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ERROR_DESCRIPTION VARCHAR(1000) NOT NULL,
    PRIMARY KEY (ERROR_LOG_ID)
);

CREATE DATABASE TCM_PRACTITIONER;
USE TCM_PRACTITIONER;

CREATE table practitioner(
  PractitionerID INT NOT NULL AUTO_INCREMENT,
    NRIC CHAR(9) NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    PHONE INT(8) NOT NULL,
    TITLE VARCHAR (100) NOT NULL,
    GENDER CHAR(1) NOT NULL,
    PASSWORD VARCHAR(100) NOT NULL,
    primary key (PractitionerID)
);

INSERT INTO PRACTITIONER(NRIC, NAME, PHONE, TITLE, GENDER, PASSWORD) VALUES ('G1837465P', 'CHAN KAT TONG', "81757463", 'Senior Physician', 'M', 'hello_123');
INSERT INTO PRACTITIONER(NRIC, NAME, PHONE, TITLE, GENDER, PASSWORD) VALUES ("G1857675Q", "LEE WING KIT", "85746374", "Junior Physician", "M", "hello_123");

CREATE TABLE IF NOT EXISTS PRACTITIONER_DEGREE(
  PractitionerID INT not null,
    Degree VARCHAR(150) not null,
    primary key (PractitionerID, Degree),
    FOREIGN KEY (PractitionerID) REFERENCES practitioner(PractitionerID)
);

INSERT INTO practitioner_degree(PractitionerID, Degree) values (1, "PhD");
INSERT INTO practitioner_degree(PractitionerID, Degree) values (1, "Masters");
INSERT INTO practitioner_degree(PractitionerID, Degree) values (1, "Bachelor's");
INSERT INTO practitioner_degree(PractitionerID, Degree) values (2, "PhD");
INSERT INTO practitioner_degree(PractitionerID, Degree) values (2, "Masters");
INSERT INTO practitioner_degree(PractitionerID, Degree) values (2, "Bachelor's");

CREATE TABLE IF NOT EXISTS PRACTITIONER_LANGUAGE(
  PractitionerID int not null,
    Language varchar(15) not null,
    PRIMARY KEY (PractitionerID, Language),
    FOREIGN KEY (PractitionerID) REFERENCES practitioner(PractitionerID)
);

INSERT INTO practitioner_language(PractitionerID, Language) values (1, "English");
INSERT INTO practitioner_language(PractitionerID, Language) values (1, "Mandarin");
INSERT INTO practitioner_language(PractitionerID, Language) values (1, "Indonesian");
INSERT INTO practitioner_language(PractitionerID, Language) values (2, "English");
INSERT INTO practitioner_language(PractitionerID, Language) values (2, "Mandarin");
INSERT INTO practitioner_language(PractitionerID, Language) values (2, "Indonesian");

CREATE TABLE IF NOT EXISTS PRACTITIONER_UNAVAILABLE_SCHEDULE(
  practitionerid int not null,
    date_and_time DATETIME not null,
    primary key (PractitionerID, date_and_time),
    foreign key (practitionerID) references practitioner(practitionerID)
);


DROP DATABASE IF EXISTS TCM_TREATMENT;
CREATE DATABASE TCM_TREATMENT;
USE TCM_TREATMENT;
CREATE TABLE TREATMENT(
  TREATMENTID INT NOT NULL AUTO_INCREMENT,
    title VARCHAR(150) not null,
    pricing DECIMAL(5, 2) NOT NULL,
    PRIMARY KEY (TREATMENTID)
);

INSERT INTO treatment(TREATMENTID, title, pricing) values (1, "Acupunture", 40);
INSERT INTO treatment(TREATMENTID, title, pricing) values (2, "Tui Na", 80);
INSERT INTO treatment(TREATMENTID, title, pricing) values (3, "Cupping", 35);
INSERT INTO treatment(TREATMENTID, title, pricing) values (4, "Auriculotheraphy", 24);
INSERT INTO treatment(TREATMENTID, title, pricing) values (5, "Heating Lamp", 5);
INSERT INTO treatment(TREATMENTID, title, pricing) values (6, "Acupunture Stimulator", 5);

DROP DATABASE IF EXISTS TCM_PATIENT;
CREATE DATABASE TCM_PATIENT;
USE TCM_PATIENT;
CREATE TABLE PATIENT(
  NRIC CHAR(9) NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    PHONE INT(8) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    PRIMARY KEY (NRIC)
);

CREATE TABLE PATIENT_TREATMENTS(
  NRIC CHAR(9) NOT NULL,
    TREATMENT VARCHAR(100) NOT NULL,
    PRIMARY KEY (NRIC, TREATMENT),
    FOREIGN KEY (NRIC) REFERENCES PATIENT(NRIC)
);


DROP DATABASE IF EXISTS TCM_BOOKING;
CREATE DATABASE TCM_BOOKING;
USE TCM_BOOKING;

-- CREATE table if not exists practitioner(
--   PractitionerID INT NOT NULL AUTO_INCREMENT,
--     NRIC CHAR(9) NOT NULL,
--     NAME VARCHAR(100) NOT NULL,
--     PHONE INT(8) NOT NULL,
--     TITLE VARCHAR (100) NOT NULL,
--     GENDER CHAR(1) NOT NULL,
--     PASSWORD VARCHAR(100) NOT NULL,
--     primary key (PractitionerID)
-- );
-- INSERT INTO PRACTITIONER(NRIC, NAME, PHONE, TITLE, GENDER, PASSWORD) VALUES ('G1837465P', 'CHAN KAT TONG', 81757463, 'Senior Physician', 'M', 'hello_123');
-- CREATE TABLE PATIENT(
--   NRIC CHAR(9) NOT NULL,
--     NAME VARCHAR(100) NOT NULL,
--     PHONE INT(8) NOT NULL,
--     EMAIL VARCHAR(100) NOT NULL,
--     PRIMARY KEY (NRIC)
-- );

CREATE TABLE BOOKING(
    NRIC CHAR(9) NOT NULL,
    PROBLEM VARCHAR(1000) NOT NULL,
    PRACTITIONERID INT NOT NULL,
    DATE_AND_TIME DATETIME NOT NULL,    
    PRIMARY KEY (PractitionerID, DATE_AND_TIME)
    -- FOREIGN KEY (PRACTITIONERID) REFERENCES PRACTITIONER(PRACTITIONERID),
    -- FOREIGN KEY (NRIC) REFERENCES PATIENT(NRIC)
);

CREATE TABLE BOOKING_PENDING(
    PRACTITIONERID INT NOT NULL,
    DATE_AND_TIME DATETIME NOT NULL,
    CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (PRACTITIONERID, DATE_AND_TIME)
    -- FOREIGN KEY (PRACTITIONERID) REFERENCES PRACTITIONER(PRACTITIONERID)
);




DELIMITER $$
CREATE TRIGGER confirm_booking AFTER INSERT ON BOOKING
FOR EACH ROW
BEGIN
    DELETE FROM BOOKING_PENDING WHERE PRACTITIONERID = NEW.PRACTITIONERID AND DATE_AND_TIME = NEW.DATE_AND_TIME;
END $$

DELIMITER ; 

DELIMITER $$

CREATE DEFINER=root@localhost EVENT DELETE_UNPAID_PENDING ON SCHEDULE EVERY 1 MINUTE STARTS '2021-03-20 21:16:57' ENDS '2021-06-16 21:16:57' ON COMPLETION NOT PRESERVE ENABLE DO delete from booking_pending where CREATED < (NOW() - INTERVAL 10 MINUTE)$$

DELIMITER ;
COMMIT;


FLUSH PRIVILEGES;
CREATE USER 'PhrisFooTCM'@'%' IDENTIFIED BY '';
GRANT SELECT, INSERT ON *.* TO 'PhrisFooTCM'@'%';
ALTER USER 'PhrisFooTCM'@'%' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;